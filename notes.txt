- Projects and Stacks
- Stacks = different instances of infrastucture
- Stack export and import to migrate between backends
- State is stored in checkpoints (transactional snapshot) - records often and early - easy to recover from failure
- Default Naming uses random ids as postfix for names (so multiple stacks can be created in same env)
- Local backed uses flat structure - so stacks
- With Pulumi backend, the AWS calls are still made from the client unlike TFE model
- Get static functions = datasource
- Provider functions are general utility functions
 - apigateway.LookupDomainName
- Outputs are promises - special operations to use outputs for concatenation etc. (pulumi.Sprintf, pulumi.concat, etc)
- Languages are run first class to generate resource graph (as opposed to terreform cdk/aws cdk transpiling language to json/yaml)
- Resource Aliasing aid with refactoring/renaming resources
- Transformations to apply custom overrides on top of component (module)
- Terraform Variables = Pulumi config. (pulumi config set)
- Encryption provider*
- Crosscode (pulumi convert) to convert between languages
- Crosswalk (awsx) - abstraction on top of aws resources (ec2, ecs, lb)
- Pulumi AWS CDK Adapter - use AWS CDK constructs in a pulumi program (creates pulumi resources without cloudformation)

